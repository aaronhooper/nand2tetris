// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    PARTS:

    /* Select A/C instruction */
    /* instruction[15] -> A/C bit */
    /* instruction[5]  -> d1 */
    And (a=instruction[5], b=instruction[15], out=d1Andac);
    Not (in=instruction[15], out=acNot);
    Or (a=d1Andac, b=acNot, out=outOr);
    Mux16 (a=ALUout, b[0..14]=instruction[0..14], b[15]=false, sel=acNot, out=acNotMux);
    ARegister (in=acNotMux, load=outOr, out[0..14]=Aout, out[0..14]=addressM);

    /* Select A/M register */
    /* instruction[12] -> a */
    And (a=instruction[15], b=instruction[12], out=amSelect);
    Mux16 (a[0..14]=Aout, b=inM, sel=amSelect, out=amMux);

    /* Program Counter */
    PC (in[0..14]=Aout, load=jump, inc=true, reset=reset, out[0..14]=pc);

    /* Write to D if the word is a C instruction. */
    /* instruction[4] -> d2 */
    And (a=instruction[15], b=instruction[4], out=loadD);
    DRegister (in=ALUout, load=loadD, out=Dout);

    /* Write to M? */
    /* instruction[3] -> d3 */
    And (a=instruction[15], b=instruction[3], out=writeM);


    /* Arithmetic Logic */
    ALU (
        /* instruction[11] -> zx / c1 */
        /* instruction[10] -> nx / c2 */
        zx=instruction[11], nx=instruction[10],

        /* instruction[9]  -> zy / c3 */
        /* instruction[8]  -> ny / c4 */
        zy=instruction[9], ny=instruction[8],

        /* instruction[7]  -> f  / c5 */
        /* instruction[6]  -> no / c6 */
        f=instruction[7], no=instruction[6],

        x=Dout, y=amMux,
        out=ALUout, zr=ALUzr, ng=ALUng,
        out=outM
    );


    /* Jump Conditionals */
    /* instruction[2] -> j1 */
    And (a=instruction[2], b=ALUng, out=j1out);

    /* instruction[1] -> j2 */
    And (a=instruction[1], b=ALUzr, out=j2out);

    /* instruction[0] -> j3 */
    Or (a=ALUng, b=ALUzr, out=ngOrzr);
    Not (in=ngOrzr, out=NotngOrzr);
    And (a=instruction[0], b=NotngOrzr, out=j3out);

    /* Jump only if at least one of the 3 jump predicates is satisfied
    * and the word is a C instruction. */
    Or (a=j1out, b=j2out, out=j1Orj2);
    Or (a=j1Orj2, b=j3out, out=j1Orj2Orj3);
    And (a=instruction[15], b=j1Orj2Orj3, out=jump);
}
